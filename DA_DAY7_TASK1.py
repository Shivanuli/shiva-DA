# -*- coding: utf-8 -*-
"""DA_TASK1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eSz1yi7aKonr_jCTEtcvKOOO0dbA83sD
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.preprocessing.image import ImageDataGenerator
IMG_SIZE=224
BATCH_SIZE=32

train_datagen=ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2
)

train_generator=train_datagen.flow_from_directory('/content/drive/MyDrive/mangoes/train',
    target_size=(IMG_SIZE,IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='binary',
    subset='training')
val_generator=train_datagen.flow_from_directory('/content/drive/MyDrive/mangoes/train',
    target_size=(IMG_SIZE,IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='binary',
    subset='validation')
test_generator=train_datagen.flow_from_directory('/content/drive/MyDrive/mangoes/test',
    target_size=(IMG_SIZE,IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='binary',
    subset='validation')

from google.colab import drive
drive.mount('/content/drive')

model=keras.Sequential([
    layers.Conv2D(32,(3,3),activation='relu',input_shape=(IMG_SIZE,IMG_SIZE,3)),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64,(3,3),activation='relu'),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(128,(3,3),activation='relu'),
    layers.MaxPooling2D((2,2)),
    layers.Flatten(),
    layers.Dense(128,activation='relu'),
    layers.Dense(1,activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

history=model.fit(train_generator,validation_data=val_generator,epochs=5)

model.save("Mangoes.h5","label.txt")

from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np

#load the saved model
model=load_model('/content/Mangoes.h5')
#Load and preprocess the test image
test_image_path =('/content/drive/MyDrive/mangoes/test/both_mangos/download (7).jpeg')
img = image.load_img(test_image_path,target_size=(224,224))
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis = 0)   #Add batch dimension
img_array /= 255.    #Normalize the pixel values
#Make predictions
prediction = model.predict(img_array)
#print the prediction
if prediction < 0.5:
  print("Prediction: raw mango (Probability:",prediction[0][0],")")
else:
  print("Prediction: ripel mango (Probability:",prediction[0][0],")")